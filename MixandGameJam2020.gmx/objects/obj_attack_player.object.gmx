<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_attack_hitbox</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-11</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>face_dir = "down";
dust_made = false;

//hide attack offscreen and store where to move it back to when it reaches the correct frame
spawn_x = x;
spawn_y = y;
x = -10;
y = -10
vx = 0;
vy = 0;
player_state = "state_attack"

if(instance_exists(obj_player)){
    face_dir = obj_player.face_dir;
    parent_x = obj_player.x;
    parent_y = obj_player.y;
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var player_inst;
    if(instance_exists(obj_player_mia)){
        player_inst = obj_player_mia;
    }else{
        player_inst = self;
    };
    
//kill self if player is in wrong state
if(player_inst.player_state != "state_attack"){
    instance_destroy();
};

/*
    When the pan is created, it moves itself off screen until the correct part of the players animation.
    Then, it moves itself to the correct  spot and moves sideways to increase the effective width of the player's attack.
*/

//RIGHT
if(player_inst.face_dir == "right"){
    //draw pan sprite
    if((player_inst.image_index &gt;= 1)and(player_inst.image_index &lt; 2)){
        draw_sprite(spr_player_pan_right,0,player_inst.x-20,player_inst.y-10);
    }else if(player_inst.image_index &gt;= 2){
        x = spawn_x;
        y = spawn_y+4;
        spawn_y -= 0.25;
        if!(audio_is_playing(snd_attack)){audio_play_sound(snd_attack,10,0)};
        draw_sprite(spr_player_pan_right,1,player_inst.x+3,player_inst.y);
        if!(dust_made){
           // instance_create(x-6,y,obj_fx_dust)
            instance_create(x+2,y,obj_fx_dust)
            dust_made = true;
        };
    };
//UP
}else if(player_inst.face_dir == "up"){
    //draw pan sprite
    if((player_inst.image_index &gt;= 1)and(player_inst.image_index &lt; 2)){
        draw_sprite(spr_player_pan_up,0,player_inst.x-2,player_inst.y-16);
    }else if(player_inst.image_index &gt;= 2){
        x = spawn_x-4;
        y = spawn_y;
        spawn_x += 0.25;
        if!(audio_is_playing(snd_attack)){audio_play_sound(snd_attack,10,0)};
        draw_sprite(spr_player_pan_up,1,player_inst.x-2,player_inst.y-6);
        if!(dust_made){
           // instance_create(x-8,y,obj_fx_dust)
            instance_create(x+2,y,obj_fx_dust)
            dust_made = true;
        };
    };
//LEFT
}else if(player_inst.face_dir == "left"){
    //draw pan sprite
    if((player_inst.image_index &gt;= 1)and(player_inst.image_index &lt; 2)){
        draw_sprite(spr_player_pan_left,0,player_inst.x+3,player_inst.y-10);
    }else if(player_inst.image_index &gt;= 2){
        x = spawn_x;
        y = spawn_y+4;
        spawn_y -= 0.25;
        if!(audio_is_playing(snd_attack)){audio_play_sound(snd_attack,10,0)};
        draw_sprite(spr_player_pan_left,1,player_inst.x-20,player_inst.y);
        if!(dust_made){
         //   instance_create(x-4,y,obj_fx_dust)
            instance_create(x+4,y,obj_fx_dust)
            dust_made = true;
        };
    };
//DOWN
}else if(player_inst.face_dir == "down"){
    //draw pan sprite
    if((player_inst.image_index &gt;= 1)and(player_inst.image_index &lt; 2)){
        draw_sprite(spr_player_pan_down,0,player_inst.x,player_inst.y-10);
    }else if(player_inst.image_index &gt;= 2){
        x = spawn_x+4;
        y = spawn_y;
        spawn_x -= 0.25;
        if!(audio_is_playing(snd_attack)){audio_play_sound(snd_attack,10,0)};
        draw_sprite(spr_player_pan_down,1,player_inst.x,player_inst.y+10);
        if!(dust_made){
          //  instance_create(x-4,y-6,obj_fx_dust)
            instance_create(x+2,y-6,obj_fx_dust)
            dust_made = true;
        };
    };
};

//draw_sprite(sprite_index, image_index, x, y);
depth = -y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
