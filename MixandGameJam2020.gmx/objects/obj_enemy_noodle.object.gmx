<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_noodle_1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
enemy_name = "Noodleworm"
drop_item = obj_drop_noodle;

can_move = true;
is_underground = false;
image_speed = 0;
target_x = 16;
target_y = 16;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enemy Movement
if!(willdie){
    if!(is_underground){
        is_underground = true;
        image_speed = 0.125;
        sprite_index = spr_noodle_1;
        image_index = 0;
        target_x = 32 + (irandom_range(1,12)*16);
        target_y = 64 + (irandom_range(1,6)*16);
        while(place_meeting(target_x,target_y,obj_solid)){
            target_x = 32 + (irandom_range(1,12)*16);
            target_y = 64 + (irandom_range(1,6)*16);
        };
        
        alarm[0] = room_speed*2;
    }else{
        x = target_x;
        y = target_y;
        
        is_underground = false
        image_speed = 0.125;
        sprite_index = spr_noodle_2;
        image_index = 0;
        
        alarm[0] = room_speed*3;
    };

};
/*
left = 0;
right = 0;
up = 0;
down = 0;



// Randomly choose direction and move based on obj_solid position

var target_direction = choose("left","right","up","down");

if(target_direction == "left"){
    left = 1;
    if(!place_meeting(x-16,y,obj_solid)){
        targetX = x - 16;
    } else {
        targetX = x;
        alarm[0] = 5;
    }  
}

if(target_direction == "right"){
    right = 1;
    if(!place_meeting(x+16,y,obj_solid)){
        targetX = x + 16;  
    } else {
        targetX = x;
        alarm[0] = 5;
    }    
}

if(target_direction == "up"){
    up = 1;
    if(!place_meeting(x,y-16,obj_solid)){
    targetY = y - 16;
    } else {
        targetY = y;
        alarm[0] = 5;
    }
}

if(target_direction == "down"){
    down = 1;
    if(!place_meeting(x,y+16,obj_solid)){
        targetY = y + 16;
    } else {
        targetY = y;
        alarm[0] = 5;
    }
    
}

//vx = (right - left) * enemy_speed;
//vy = (down - up) * enemy_speed;





can_move = true;
*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death Condition

//When attacked
if((place_meeting(x, y, obj_attack_player))and!(is_underground)){
    willdie = true;
    is_flashing = true;
    flashing_timer = 1;
    alarm[1] = room_speed/2;
    vy = lengthdir_y(1.5, point_direction(obj_player_mia.x, obj_player_mia.y, x, y))
    vx = lengthdir_x(1.5, point_direction(obj_player_mia.x, obj_player_mia.y, x, y))
    
    //set players enemy name
    if(instance_exists(obj_player_mia)){
        obj_player_mia.last_enemy_name = enemy_name;
        obj_player_mia.last_enemy_sprite = sprite_index;  
    };
};

//After slime attacked
if((willdie)and!(game_is_paused())){
    if!(place_meeting(x + vx, y, obj_solid)){
        x += vx;
    };
    if!(place_meeting(x, y + vy, obj_solid)){
        y += vy;
    };
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///flash timer
if((is_flashing)and!(game_is_paused())){
    if(flashing_timer &gt; 0){
        flashing_timer--;
    }else{
        if(flash_state == 1){
            flash_state = 0;
        }else{
            flash_state = 1;
        };
        flashing_timer = 8;
    }
};
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enemy Step Movement override
targetX = x;
targetY = y;


if(game_is_paused()){
    alarm[0]++;
    alarm[1]++;
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
image_index = image_number+1;

if(is_underground){
    x = -16;
    y = -16;
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
