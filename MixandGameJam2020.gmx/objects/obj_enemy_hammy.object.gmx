<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hammy_front</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
enemy_name = "Hammy Swine";
drop_item = obj_drop_ham;
enemy_speed = 0.4;
anim_speed = 0.125;

is_charging = false;
prev_dir = "left";
step_counter = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enemy Movement
left = 0;
right = 0;
up = 0;
down = 0;

alarm[0] = room_speed;
    
//if player is within a straight line, charge
if!(is_charging){
    if(collision_line(x+8,y-8,0,y,obj_player_mia,true,false)){
        left = 1;
        sprite_index = spr_hammy_side;
        is_charging = true;
    }else if(collision_line(x+8,y-8,room_width,y,obj_player_mia,true,false)){
        right = 1;
        sprite_index = spr_hammy_side_2;
        is_charging = true;
    }else if(collision_line(x+8,y-8,x,0,obj_player_mia,true,false)){
        up = 1;
        sprite_index = spr_hammy_back;
        is_charging = true;
    }else if(collision_line(x+8,y-8,x,room_height,obj_player_mia,true,false)){
        down = 1;
        sprite_index = spr_hammy_front;
        is_charging = true;
    };
};

if!(is_charging){
    if(step_counter == 0){
        // Randomly choose direction and move based on obj_solid position. More likely to move in the last direction chosen
        var target_direction = choose("left","right","up","down",prev_dir);
        
        if(target_direction == "left"){
            left = 1;
            sprite_index = spr_hammy_side;
            if(!place_meeting(x-16,y,obj_solid)){
                targetX = x - 16;
            } else {
                targetX = x;
                alarm[0] = 5;
            }  
        }
        
        if(target_direction == "right"){
            right = 1;
            sprite_index = spr_hammy_side_2;
            if(!place_meeting(x+16,y,obj_solid)){
                targetX = x + 16;  
            } else {
                targetX = x;
                alarm[0] = 5;
            }    
        }
        
        if(target_direction == "up"){
            up = 1;
            sprite_index = spr_hammy_back;
            if(!place_meeting(x,y-16,obj_solid)){
            targetY = y - 16;
            } else {
                targetY = y;
                alarm[0] = 5;
            }
        }
        
        if(target_direction == "down"){
            down = 1;
            sprite_index = spr_hammy_front;
            if(!place_meeting(x,y+16,obj_solid)){
                targetY = y + 16;
            } else {
                targetY = y;
                alarm[0] = 5;
            }
            
        }
        
        //vx = (right - left) * enemy_speed;
        //vy = (down - up) * enemy_speed;
        
        
        prev_dir = target_direction;
        can_move = true;
        step_counter = 1;
    }else{
        step_counter--;
    };
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if((is_charging)and!(game_is_paused())){
    image_speed = anim_speed*2;
    alarm[0] = 999;

    if(left == true){
        if!(place_meeting(x-2,y,obj_solid)){
            x -= 2;
        }else{
             is_charging = false;
             step_counter = 0;
             image_speed = 0;
             image_index = 0;
             alarm[0] = room_speed;
        };
        draw_sprite(spr_hammy_charge,0,x,y);
    }else if(right == true){
        if!(place_meeting(x+2,y,obj_solid)){
            x += 2;
        }else{
            is_charging = false;
            step_counter = 0;
            image_speed = 0;
            image_index = 0;
            alarm[0] = room_speed;
        };
        draw_sprite(spr_hammy_charge,1,x,y);
    }else if(up == true){
        if!(place_meeting(x,y-2,obj_solid)){
            y -= 2;
        }else{
            is_charging = false;
            step_counter = 0;
            image_speed = 0;
            image_index = 0;
            alarm[0] = room_speed;
        };
        draw_sprite(spr_hammy_charge,2,x,y);
    }else if(down == true){
        if!(place_meeting(x,y+2,obj_solid)){
            y += 2;
        }else{
            is_charging = false;
            step_counter = 0;
            image_speed = 0;
            image_index = 0;
            alarm[0] = room_speed;
        };
        draw_sprite(spr_hammy_charge,3,x,y);
    };
    
    can_move = true;
    targetX = x;
    targetY = y;
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
