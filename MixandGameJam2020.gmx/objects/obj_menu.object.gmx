<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//menu properties
tile_size = 8;//use 8x8 tiles
menu_width = 1;//width in tiles
menu_height = 1;//height in tiles
screen_x = 1;//position on gui in tiles
screen_y = 1;//position on gui in tiles
menu_color = c_dkgray;
menu_alpha = 0.75;
menu_is_active = false;
draw_menu = false;
menu_move_make_sound = false;

//menu option definitions
has_options = false;
option_columns = 0;
option_rows = 0;
option_sep_x = 0;
option_sep_y = 0;
option_selected = false;
option_return = false;
cursor_x = 1;
cursor_y = 1;
cursor_wraps_x = false;
cursor_wraps_y = false;
cursor_remember_position = true;

//used for drawing
draw_height = 1;
draw_dir = 1;
finished_drawing = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if((menu_is_active)and(finished_drawing)and!option_selected){
    if(has_options){
        //scroll cursor left for options
        if(keyboard_check_pressed(vk_left)){
            if(cursor_x - 1 &gt; 0){
                cursor_x--;
            }else if(cursor_wraps_x){
                cursor_x = option_columns;
            };
            if(menu_move_make_sound){
               // audio_play_sound(snd_menu_blip,10,false);
            };
        }else if(keyboard_check_pressed(vk_right)){
            if(cursor_x + 1 &lt;= option_columns){
                cursor_x++;
            }else if(cursor_wraps_x){
                cursor_x = 1;
            };
            if(menu_move_make_sound){
               // audio_play_sound(snd_menu_blip,10,false);
            };
        };
        
        //scroll cursor right for options
        if(keyboard_check_pressed(vk_up)){
            if(cursor_y - 1 &gt; 0){
                cursor_y--;
            }else if(cursor_wraps_y){
                cursor_y = option_rows;
            };
            if(menu_move_make_sound){
               // audio_play_sound(snd_menu_blip,10,false);
            };
        }else if(keyboard_check_pressed(vk_down)){
            if(cursor_y + 1 &lt;= option_rows){
                cursor_y++;
            }else if(cursor_wraps_y){
                cursor_y = 1;
            };
            if(menu_move_make_sound){
               // audio_play_sound(snd_menu_blip,10,false);
            };
        };
        
        //select an option
        if(keyboard_check_pressed(ord('X'))){
            option_selected = true;
           // audio_play_sound(snd_menu_confirm,10,false);
        };
        
        //select an option
        if(keyboard_check_pressed(ord('Z'))){
            option_selected = true;
            option_return = true;
          //  audio_play_sound(snd_menu_deny,10,false);
        };
    };
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(draw_menu){
    //make menu expand down on creation
    if!(finished_drawing){
        if(draw_height != menu_height){
            draw_height += draw_dir;
        }else{
            finished_drawing = true;
        };
    };

    //draw menu
    draw_set_color(menu_color);
    draw_set_alpha(menu_alpha);
    //draw_set_circle_precision(8);
    draw_roundrect(screen_x*tile_size,screen_y*tile_size,((screen_x+menu_width)*tile_size)-1,((screen_y+draw_height)*tile_size)-1,0);
    draw_set_alpha(1);
    //draw menu borders
    if(menu_alpha &gt; 0){
        draw_sprite(spr_menu_borders,0,screen_x*tile_size,screen_y*tile_size);//top left
        draw_sprite_stretched(spr_menu_borders,1,(screen_x+1)*tile_size,screen_y*tile_size,((menu_width-2)*tile_size)+1,tile_size);//top line
        draw_sprite(spr_menu_borders,2,((screen_x+menu_width)*tile_size)-tile_size+1,screen_y*tile_size);//top right
        draw_sprite_stretched(spr_menu_borders,7,(screen_x)*tile_size,(screen_y+1)*tile_size,tile_size,((draw_height-2)*tile_size)+1);//left line
        draw_sprite(spr_menu_borders,6,screen_x*tile_size,((screen_y+draw_height)*tile_size)-tile_size+1);//bottom left
        draw_sprite_stretched(spr_menu_borders,5,(screen_x+1)*tile_size,((screen_y+draw_height)*tile_size)-tile_size+1,((menu_width-2)*tile_size)+1,tile_size);//bottom line
        draw_sprite(spr_menu_borders,4,((screen_x+menu_width)*tile_size)-tile_size+1,((screen_y+draw_height)*tile_size)-tile_size+1);//bottom right
        draw_sprite_stretched(spr_menu_borders,3,((screen_x+menu_width)*tile_size)-tile_size+1,(screen_y+1)*tile_size,tile_size,((draw_height-2)*tile_size)+1);//right line
    };
    draw_set_color(c_white);
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
